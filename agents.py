import os
from enum import Enum
from random import randint, choice
from time import sleep


def print_col(text: str, custom_sep: str = '&', end="\n"):
    message = text + end
    new_message = list(message)
    for index, letter in enumerate(message):
        if letter == custom_sep:
            dictionary = {
                'r': '0',  # —Å–±—Ä–æ—Å
                'l': '1',  # –∂–∏—Ä–Ω—ã–π
                'n': '4',  # –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π
                'm': '9',  # –∑–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π
                'o': '3',  # –∫—É—Ä—Å–∏–≤
                'N': '21',  # —Ö–æ—Ä–æ—à–æ –ø–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π
                '19': '34',  # —Å–∏–Ω–∏–π
                '0': '30',  # —á—ë—Ä–Ω—ã–π
                '4c': '31',  # –∫—Ä–∞—Å–Ω—ã–π
                '2a': '32',  # –∑–µ–ª—ë–Ω—ã–π
                '6e': '33',  # –∂—ë–ª—Ç—ã–π
                '5d': '35',  # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
                '3b': '36',  # –±–∏—Ä—é–∑–æ–≤—ã–π
                '78': '37'  # —Å–µ—Ä—ã–π
            }
            after = False
            try:
                next_letter = message[index + 1]
                after = True
                code = [v for k, v in dictionary.items() if next_letter in k][0]
            except IndexError as ex:
                nonewline = message.replace("\n", "\033[4Nm\033[0m")
                ex.args = (f'"{next_letter}" is not a valid code. Valid codes: {", ".join(dictionary.keys())}',)\
                    if after else (f'Excepted a valid code after "{custom_sep}" at index {index}:\n'
                                   f'{nonewline}\n{" " * index} ‚Üë THERE',)
                raise ex
            else:
                new_message[index] = '\033[' + code
                new_message[index + 1] = 'm'
    print(''.join(new_message), end="")


def get_all(super_: type):
    return [
        e() for e in globals().values()
        if e not in (super_, UserInput) and type(e) == type and issubclass(e, super_)
    ]


def safe_input(maximum):
    while True:
        try:
            a = int(input())
            assert 1 <= a <= maximum
            return a
        except:
            pass


class Steps(Enum):
    BETRAY    = False
    COOPERATE = True


class Game:
    def __init__(self, player1, player2, max_steps=100, both_betray=1, both_cooperate=3, betrayer=5, victim=0):
        self.step  = 0
        self.steps = []  # [(True, False), (False, False)]
        self._max_steps = max_steps  # –ö–æ–ª-–≤–æ —Ö–æ–¥–æ–≤ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–∑–≤–µ—Å—Ç–Ω–æ –∞–≥–µ–Ω—Ç–∞–º!

        self.player1: BaseAgent = player1
        self.player2: BaseAgent = player2
        self.score1 = self.score2 = 0

        self.name_hidden = False  # –°–∫—Ä—ã–≤–∞–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –æ–Ω –±—É–¥–µ—Ç —Ä–∞—Å–∫—Ä—ã—Ç —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Ü–µ –∏–≥—Ä—ã

        self.both_betray    = both_betray
        self.both_cooperate = both_cooperate
        self.betrayer       = betrayer
        self.victim         = victim

    def is_vs_player(self):
        return type(self.player1) == UserInput

    def get_opponents_steps(self, target) -> list[bool]:
        match target:
            case self.player1: index = 1
            case self.player2: index = 0
            case _: raise ValueError(f"Target must be an Agent (got {type(target)})")
        return [entry[index] for entry in self.steps]

    def get_opponent(self, target):
        return self.player1 if target == self.player2 else self.player2

    def get_opponents_step(self, target) -> bool:
        return self.get_current_state()[int(target == self.player1)]

    def get_current_state(self):
        return self.steps[self.step - 1] if self.step != 0 else (None, None)

    def perform_single(self):
        play = self.player1.on_turn(self), self.player2.on_turn(self)
        if play == (Steps.BETRAY, Steps.BETRAY):
            self.score1 += self.both_betray
            self.score2 += self.both_betray

        elif play == (Steps.COOPERATE, Steps.COOPERATE):
            self.score1 += self.both_cooperate
            self.score2 += self.both_cooperate

        elif play[0] == Steps.BETRAY:
            self.score1 += self.betrayer
            self.score2 += self.victim

        else:
            self.score1 += self.victim
            self.score2 += self.betrayer

        self.steps.append(play)

    def simulate(self):
        for _ in range(self.step, self._max_steps):
            self.perform_single()
            self.step += 1

        self.player1.scores.append(self.score1)
        self.player2.scores.append(self.score2)

        if self.is_vs_player():
            os.system("cls")
            self.print()

            if self.name_hidden:
                print_col("&7")
                if self.score1 > self.score2:
                    print("–•–º–º... –•–æ—Ç—å —Ç–µ–±–µ —ç—Ç–æ –∏ –Ω–µ –Ω–∞–¥–æ, –Ω–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–ø. –æ—á–∫–∏, —Å–æ–≥–ª–∞—Å–µ–Ω? (–ù–∏—á–µ–≥–æ –Ω–µ –≤–≤–æ–¥–∏ –¥–ª—è —Å–∫–∏–ø–∞)")
                    if input() != "": self.offer_deal()
                else:
                    print("–•–º–º...")
                    sleep(1)
                    self.offer_deal()

            if self.score1 > self.score2:
                print("\033[0m"
                    "#   #  #####  #####  #####  #####  ####   #   #",
                    "#   #    #    #        #    #   #  #   #  #   #",
                    "#   #    #    #        #    #   #  ####    ### ",
                    " # #     #    #        #    #   #  #  #      # ",
                    "  #    #####  #####    #    #####  #   #  ###  ", sep="\n"  # victory
                )
                print_col(f"–°—á—ë—Ç: &a{self.score1}&7/&c{self.score2}&7 (—Ä–∞–∑–Ω–∏—Ü–∞ {self.score1 - self.score2})")
            elif self.score1 < self.score2:
                print("\033[0m"
                      "####   #####  #####  #####    #    #####",
                      "#   #  #      #      #       # #     #  ",
                      "#   #  #####  #####  #####  #   #    #  ",
                      "#   #  #      #      #      #####    #  ",
                      "####   #####  #      #####  #   #    #  ", sep="\n"  # defeat
                      )
                print_col(f"–°—á—ë—Ç: &a{self.score1}&7/&c{self.score2}&7 (—Ä–∞–∑–Ω–∏—Ü–∞ {self.score2 - self.score1})")
            else:
                print("\033[0m"
                      "####   ####     #    #   #",
                      "#   #  #   #   # #   #   #",
                      "#   #  ####   #   #  #   #",
                      "#   #  #  #   #####  # # #",
                      "####   #   #  #   #  #   #", sep="\n"  # draw
                      )
                print_col(f"–°—á—ë—Ç: &9{self.score1}&7/&9{self.score2}")

            if self.name_hidden:
                print_col(f"&r–í—Ç–æ—Ä—ã–º –∏–≥—Ä–æ–∫–æ–º –±—ã–ª: {self.player2.get_name_in_leader_board()}")

            os.system("pause")

    def offer_deal(self):
        add_score = 15

        if self.score1 + add_score < self.score2:
            print("–ë–æ—é—Å—å –¥–∞–∂–µ –¥–æ–ø. –æ—á–∫–∏ —Ç–µ–±–µ –Ω–µ –ø–æ–º–æ–≥—É—Ç")
            sleep(1)
        else:
            print(
                f"–ü—Ä–µ–¥–ª–∞–≥–∞—é —Å–¥–µ–ª–∫—É: –µ—Å–ª–∏ —Ç—ã —É–≥–∞–¥–∞–µ—à—å –∫—Ç–æ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫, —Ç–æ —è –¥–∞–º —Ç–µ–±–µ {add_score} –æ—á–∫–æ–≤, "
                f"—Ç–µ–±–µ –∫–∞–∫ —Ä–∞–∑ –¥–æ {'–Ω–∏—á–µ–π' if self.score1 + add_score == self.score2 else '–ø–æ–±–µ–¥—ã'} —Ö–≤–∞—Ç–∏—Ç!\n"
            )
            print("–í—ã–±–∏—Ä–∞–π:")

            valid_players = [player for player in players if player.evil == self.player2.evil]
            for i, player in enumerate(valid_players, start=1):
                print_col(f'&7{i}. {player.get_name_in_leader_board()}&7 - &r"{player.bio}"')

            print_col("&7")
            lifes = randint(1, 3)
            while True:
                selected = safe_input(len(valid_players))
                if valid_players[selected - 1] == self.player2:
                    print(f"–£–≥–∞–¥–∞–ª! –ü–æ–ª—É—á–∞–π –±–æ–Ω—É—Å –≤ –≤–∏–¥–µ +{add_score} –æ—á–∫–æ–≤")
                    self.score1 += add_score
                    sleep(1)
                else:
                    lifes -= 1
                    print(["–ù–µ —É–≥–∞–¥–∞–ª, –Ω–µ –¥–∞–º —Ç–µ–±–µ –æ—á–∫–æ–≤", "–ù–µ —Ç–æ—Ç, –º–æ–∂–µ—Ç –µ—â—ë —Ä–∞–∑?", "–ù–µ –ø–æ–ø–∞–ª, –µ—â—ë —Ä–∞–∑?"][lifes])
                    sleep(.5)
                    if lifes > 0: continue
                break

    def print(self):
        p1, p2 = self.player1.name, self.player2.name
        l1, l2 = map(len, (p1, p2))

        if self.name_hidden:
            p2 = "&o–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫&r"
            l2 = len("–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫")
        print_col(f'&7"&5{p1} &{self.player1.get_col_code()}{self.player1.logo}&7"'
                   ' &b&eVS '
                  f'&7"&3{p2} &{self.player2.get_col_code()}{self.player2.logo}&7"')

        if l1 > l2: p2 += " " * (l1 - l2)
        if l2 > l1: p1 += " " * (l2 - l1)

        getter = lambda step: {Steps.BETRAY: "&c‚óâ", Steps.COOPERATE: "&9‚óâ"}.get(step, "&5?")
        print_col(f"&5{p1}&7 : " + '&r '.join([getter(step) for step in self.get_opponents_steps(self.player2)]))
        print_col(f"&3{p2}&7 : " + '&r '.join([getter(step) for step in self.get_opponents_steps(self.player1)]))

        print_col(f"&7–°—á—ë—Ç: &5{self.score1}&7|&3{self.score2}", end="&7 ")
        if self.is_vs_player():
            print_col(f"; –•–æ–¥: &r#{self.step+1}")
        elif self.step > 0:
            print_col(f"; –•–æ–¥: &r{self.step+1}&7/&r{self._max_steps}")
        else:
            print_col(f"; –•–æ–¥–æ–≤: &r{self._max_steps}")


class BaseAgent:
    def __init__(self, name, bio=None, evil=False, by_chat_gpt=False):
        self.logo = "üòáüî™"[int(evil)] if evil is not None else "üí¨"
        self.name = name
        self.bio  = bio if bio else "..."
        self.scores = []
        self.evil = evil
        self.by_chat_gpt = by_chat_gpt

    def __eq__(self, other):
        return self.name == other.name if isinstance(other, BaseAgent) else False

    def __repr__(self):
        return f'Prisoner "{self.name}" ({self.get_aver_score()} points)'

    def get_col_code(self):
        return {True: "c", False: "a", None: "9"}[self.evil]

    def get_name_in_leader_board(self):
        return f'&{self.get_col_code()}{self.logo} {self.name} {"ü§ñ" if self.by_chat_gpt else ""}'

    def get_desc(self):
        return f'–ê–≥–µ–Ω—Ç "{self.name}" ({self.get_aver_score()} –æ—á–∫–æ–≤)' + (f"\n - –û–ø–∏—Å–∞–Ω–∏–µ: {self.bio}" if self.bio else "")

    def on_turn(self, game: Game) -> Steps:
        """
        –ú–µ—Ç–æ–¥, –≤—ã–∑—ã–≤–∞–µ–º—ã–π –ø—Ä–∏ –æ–ø—Ä–æ—Å–µ –∞–≥–µ–Ω—Ç–∞, –æ–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∏–ª–∏ True (—Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç), –∏–ª–∏ False (–ø—Ä–µ–¥–∞—ë—Ç)
        """
        return True

    def get_aver_score(self):
        return sum(self.scores) / len(self.scores)


class AlwaysBetray(BaseAgent):
    def __init__(self):
        super().__init__("–ü—Ä–µ–¥–∞—Ç–µ–ª—å", "–ù–µ–∏–∑–º–µ–Ω–Ω—ã–π –≤—Ä–∞–≥", evil=True)

    def on_turn(self, game: Game) -> Steps:
        return Steps.BETRAY


class AlwaysCooperate(BaseAgent):
    def __init__(self):
        super().__init__("–í–µ—Ä–Ω—ã–π —Å–æ—é–∑–Ω–∏–∫", "–î–æ–≤–µ—Ä—è—é –≤—Å–µ–º!")

    def on_turn(self, game: Game) -> Steps:
        return Steps.COOPERATE


class Fridman(BaseAgent):
    def __init__(self):
        super().__init__("–§—Ä–∏–¥–º–∞–Ω", "–ù–µ —Ç–µ—Ä–ø–∏—Ç –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
        self.was_betrayed = False

    def on_turn(self, game: Game) -> Steps:
        if game.get_opponents_step(self) == Steps.BETRAY:
            self.was_betrayed = True

        return Steps.BETRAY if self.was_betrayed else Steps.COOPERATE

class Sneaky(BaseAgent):
    def __init__(self):
        super().__init__("–•–∏—Ç—Ä—ã–π", "–ú–æ–∂–µ—Ç –ø—Ä–µ–¥–∞—Ç—å, –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å", evil=True)

    def on_turn(self, game: Game) -> Steps:
        if game.get_opponents_step(self) == Steps.BETRAY:
            return Steps.BETRAY
        else:
            return Steps.BETRAY if randint(1, 7) == 1 else Steps.COOPERATE

class Imposter(BaseAgent):
    def __init__(self):
        super().__init__("–û–±–º–∞–Ω—â–∏–∫", "–ë—É–¥–µ—Ç –ø—Ä–µ–¥–∞–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞, –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å...", evil=True)
        self.freak_out = False

    def on_turn(self, game: Game) -> Steps:
        if randint(1, 15) == 1 or game.get_opponents_step(self) == Steps.BETRAY: self.freak_out = True

        return Steps.BETRAY if self.freak_out else Steps.COOPERATE


class TitForTat(BaseAgent):
    def __init__(self):
        super().__init__("–û–∫–æ –∑–∞ –æ–∫–æ", "–î–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–µ–∑–¥–∏–µ!")

    def on_turn(self, game: Game) -> Steps:
        return game.get_opponents_step(self) or Steps.COOPERATE


class TitForTwoTats(BaseAgent):
    def __init__(self):
        super().__init__("–û–∫–æ –∑–∞ –¥–≤–∞ –æ–∫–∞", "–¢–µ—Ä–ø–∏—Ç –¥–≤–∞–∂–¥—ã, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ")

    def on_turn(self, game: Game) -> Steps:
        if game.step > 2:
            last_steps = game.get_opponents_steps(self)
            return Steps.BETRAY if last_steps[0] == Steps.BETRAY and last_steps[1] == Steps.BETRAY else Steps.COOPERATE
        return Steps.COOPERATE


class Tester(BaseAgent):
    def __init__(self):
        super().__init__("–¢–µ—Å—Ç–µ—Ä", "–ü–µ—Ä–≤—ã–π —Ö–æ–¥ —Å–∫–∞–∂–µ—Ç –º–Ω–µ –∫—Ç–æ —Ç—ã", evil=True)
        self.is_opponent_nice = False

    def on_turn(self, game: Game) -> Steps:
        if game.step == 0:
            return Steps.BETRAY
        if game.step == 1:
            self.is_opponent_nice = game.get_opponents_step(self) == Steps.COOPERATE

        if self.is_opponent_nice:
            return Steps.COOPERATE if game.step % 2 else Steps.BETRAY
        else:
            return game.get_opponents_step(self)

class AdaptiveAgent(BaseAgent):
    def __init__(self):
        super().__init__("–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π", "–ú–µ–Ω—è–µ—Ç —Å–≤–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —á–∞—Å—Ç–æ –ø—Ä–µ–¥–∞—ë—à—å", by_chat_gpt=True)

    def on_turn(self, game: Game) -> Steps:
        if game.step > 0:
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–≥–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
            opponent_steps = game.get_opponents_steps(self)
            betray_count = opponent_steps.count(Steps.BETRAY)
            betray_ratio = betray_count / game.step

            # –ï—Å–ª–∏ –±–æ–ª–µ–µ 50% —Ö–æ–¥–æ–≤ –æ–ø–ø–æ–Ω–µ–Ω—Ç –ø—Ä–µ–¥–∞–≤–∞–ª, —Ç–æ –∞–≥–µ–Ω—Ç —Ç–æ–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–µ–¥–∞–≤–∞—Ç—å
            if betray_ratio > 0.5:
                return Steps.BETRAY

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç
        return Steps.COOPERATE

class ForgivingAgent(BaseAgent):
    def __init__(self):
        super().__init__("–ü—Ä–æ—â–∞—é—â–∏–π –∞–≥–µ–Ω—Ç", "–ü—Ä–æ—â–∞–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—Ç–æ–º –Ω–∞–∫–∞–∑—ã–≤–∞–µ—Ç!",
                         evil=True, by_chat_gpt=True)
        self.was_betrayed_last_turn = False

    def on_turn(self, game: Game) -> Steps:
        if game.step > 0:
            opponent_last_step = game.get_opponents_step(self)
            if opponent_last_step == Steps.BETRAY:
                if self.was_betrayed_last_turn:
                    self.was_betrayed_last_turn = False
                    return Steps.COOPERATE
                else:
                    self.was_betrayed_last_turn = True
                    return Steps.BETRAY
            else:
                self.was_betrayed_last_turn = False
                return Steps.COOPERATE
        else:
            return Steps.COOPERATE

class OpportunistAgent(BaseAgent):
    def __init__(self):
        super().__init__("–û–ø–ø–æ—Ä—Ç—É–Ω–∏—Å—Ç", "–í—Å–µ–≥–¥–∞ –∏—â–µ—Ç –≤—ã–≥–æ–¥—É", evil=True, by_chat_gpt=True)

    def on_turn(self, game: Game) -> Steps:
        if game.step > 0:
            return\
                Steps.BETRAY\
                    if game.betrayer > game.both_cooperate or\
                    self.scores[-1] < game.get_opponent(self).scores[-1] else\
                Steps.COOPERATE

        return Steps.COOPERATE

class SpitefulAgent(BaseAgent):
    def __init__(self):
        super().__init__("–ú—Å—Ç–∏—Ç–µ–ª—å", "–ó–∞–ø–æ–º–Ω–∏—Ç —Ç–≤–æ—ë –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –æ—Ç–ø–ª–∞—Ç–∏—Ç —Å–ø–æ–ª–Ω–∞!",
                         evil=True, by_chat_gpt=True)
        self.spiting = False

    def on_turn(self, game: Game) -> Steps:
        if game.step > 0:
            if game.get_opponents_step(self) == Steps.BETRAY:
                self.spiting = True
            elif self.spiting and game.get_opponents_step(self) == Steps.COOPERATE:
                self.spiting = False

            if self.spiting:
                return Steps.BETRAY
        return Steps.COOPERATE

class CooperativeStrategist(BaseAgent):
    def __init__(self):
        super().__init__("–°—Ç—Ä–∞—Ç–µ–≥-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫", "–°–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è", evil=False, by_chat_gpt=True)
        self.initial_cooperate_steps = 3

    def on_turn(self, game: Game) -> Steps:
        if game.step < self.initial_cooperate_steps:
            return Steps.COOPERATE
        else:
            return game.get_opponents_step(self)

class PeacefulAgent(BaseAgent):
    def __init__(self):
        super().__init__("–ú–∏—Ä–æ–ª—é–±–∏–≤—ã–π –∞–≥–µ–Ω—Ç", "–°–æ—Ç—Ä—É–¥–Ω–∏—á–∞–µ—Ç, –µ—Å–ª–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞–ª —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Ö–æ–¥–∞", evil=False, by_chat_gpt=True)

    def on_turn(self, game: Game) -> Steps:
        if game.step > 0:
            last_steps = game.get_opponents_steps(self)
            if len(last_steps) > 1:
                return Steps.COOPERATE if last_steps[-1] == Steps.COOPERATE or last_steps[-2] == Steps.COOPERATE else Steps.BETRAY
            else:
                return Steps.COOPERATE if last_steps[-1] == Steps.COOPERATE else Steps.BETRAY
        return Steps.COOPERATE

class UserInput(BaseAgent):
    def __init__(self):
        super().__init__("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", '–ë–µ—Ä—ë—Ç –≤–≤–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –ø—Ä–∏ —Ä–µ–∂–∏–º–µ "–í—Å–µ –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö"', evil=None)

    def on_turn(self, game: Game) -> Steps:
        os.system("cls")
        game.print()
        while True:
            print_col('&r–ü—Ä–µ–¥–∞—Ç—å: &c"-"&7, &r–°–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å: &9"+"')
            in_ = input()
            if in_ == "-": return Steps.BETRAY
            if in_ == "+": return Steps.COOPERATE


players: list[BaseAgent] = get_all(BaseAgent)

print("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:")
print("1. –í—Å–µ –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö")
print("2. –Ø –ø—Ä–æ—Ç–∏–≤ –∫–æ–≥–æ-—Ç–æ")
mode = input()
if mode == "1":

    for p1 in players:
        for p2 in players:
            game = Game(p1, p2)
            game.simulate()

    for i, player in enumerate(sorted(players, key=BaseAgent.get_aver_score, reverse=True), start=1):
        player: BaseAgent
        print_col(f'&7#{i} {player.get_name_in_leader_board()}&7 - &r{player.get_aver_score():.1f}&8 ; "{player.bio}"')

elif mode == "2":

    print("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø—Ä–æ—Ç–∏–≤ –∫–æ–≥–æ:")
    for i, player in enumerate(players, start=1):
        print_col(f'&7{i}. {player.get_name_in_leader_board()}')
    print_col(f'&7{len(players)+1}. &e–°–ª—É—á–∞–π–Ω—ã–π —Å–æ–ø–µ—Ä–Ω–∏–∫ (+10 –æ—á–∫–æ–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫—É)')
    select = safe_input(len(players) + 1)

    game = Game(UserInput(), None, max_steps=10 + randint(-2, 2))

    if select == len(players) + 1:
        opponent = choice(players)
        game.name_hidden = True
        game.score2 = 10
    else:
        opponent = players[select - 1]

    game.player2 = opponent
    game.simulate()
